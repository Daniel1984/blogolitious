// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define("backbone", function(Backbone) {
    var NavItem;
    return NavItem = (function(_super) {

      __extends(NavItem, _super);

      function NavItem() {
        return NavItem.__super__.constructor.apply(this, arguments);
      }

      NavItem.prototype.activateView = function() {
        if (!this.get('viewActive')) {
          this.set({
            'viewActive': true
          });
          return this.trigger('active:view:changed', this);
        }
      };

      return NavItem;

    })(Backbone.Model);
  });

  define("backbone", function(Backbone) {
    var DashboardItem;
    return DashboardItem = (function(_super) {

      __extends(DashboardItem, _super);

      function DashboardItem() {
        return DashboardItem.__super__.constructor.apply(this, arguments);
      }

      DashboardItem.prototype.activateView = function() {
        if (!this.get('viewActive')) {
          this.set({
            'viewActive': true
          });
          return this.trigger('active:view:changed', this);
        }
      };

      return DashboardItem;

    })(Backbone.Model);
  });

  define("backbone", function(Backbone) {
    var User;
    return User = (function(_super) {

      __extends(User, _super);

      function User() {
        return User.__super__.constructor.apply(this, arguments);
      }

      User.prototype.urlRoot = '/users';

      User.prototype.signIn = function() {
        var model, options;
        model = this;
        this.unset("errors");
        options = {};
        options.url = '/session';
        options.success = function(res, status, xhr) {
          return model.set(model.parse(res, xhr), options);
        };
        options.error = Backbone.wrapError(options.error, model, options);
        return (this.sync || Backbone.sync).call(this, 'create', this, options);
      };

      User.prototype.logOut = function() {
        var model, options;
        model = this;
        this.unset("errors");
        options = {};
        options.url = "/session";
        options.success = function(res, status, xhr) {
          model.clear();
          return model._id = null;
        };
        options.error = function(xhr) {
          return model.set({
            errors: $.parseJSON(xhr.responseText)
          });
        };
        return (this.sync || Backbone.sync).call(this, 'delete', this, options);
      };

      return User;

    })(Backbone.Model);
  });

  define("backbone", function(Backbone) {
    var PostModel;
    return PostModel = (function(_super) {

      __extends(PostModel, _super);

      function PostModel() {
        return PostModel.__super__.constructor.apply(this, arguments);
      }

      PostModel.prototype.idAttribute = '_id';

      PostModel.prototype.urlRoot = '/posts';

      return PostModel;

    })(Backbone.Model);
  });

  define(['jquery', 'backbone', 'views/admin/site/show-view', 'models/user', 'backbone-datalink', 'bootstrap'], function($, Backbone, Site, User, DataLink, Bootstrap) {
    return {
      init: function() {
        return $(function() {
          var siteView, user;
          user = new User(window.blg_user);
          siteView = new Site({
            user: user
          });
          $('body').append(siteView.render().el);
          return this;
        });
      }
    };
  });

  define(['backbone', 'models/post/dashboard-item', 'views/admin/post/new/show-view', 'views/admin/post/search/show-view'], function(Backbone, DashboardItem, PostView, ShowView) {
    var DashboardItems;
    return DashboardItems = (function(_super) {

      __extends(DashboardItems, _super);

      function DashboardItems() {
        this.loadItems = __bind(this.loadItems, this);

        this.viewChanged = __bind(this.viewChanged, this);
        return DashboardItems.__super__.constructor.apply(this, arguments);
      }

      DashboardItems.prototype.model = DashboardItem;

      DashboardItems.prototype.initialize = function(models, options) {};

      DashboardItems.prototype.viewChanged = function(changedItem) {
        return this.each(function(item) {
          if (item !== changedItem && item.get('viewActive')) {
            return item.set({
              viewActive: false
            });
          }
        });
      };

      DashboardItems.prototype.loadItems = function() {
        return this.reset([
          {
            view: PostView,
            viewActive: true,
            title: 'Create Post',
            icon: 'icon-pencil'
          }, {
            view: ShowView,
            viewActive: false,
            title: 'Search Posts',
            icon: 'icon-search'
          }
        ]);
      };

      return DashboardItems;

    })(Backbone.Collection);
  });

  define(['backbone', 'views/admin/post/show-view', 'views/admin/video/show-view', 'views/admin/pictures/show-view', 'models/navbar-item'], function(Backbone, PostView, VideoView, PicturesView, NavbarItem) {
    var NavbarItems;
    return NavbarItems = (function(_super) {

      __extends(NavbarItems, _super);

      function NavbarItems() {
        this.loadItems = __bind(this.loadItems, this);

        this.viewChanged = __bind(this.viewChanged, this);
        return NavbarItems.__super__.constructor.apply(this, arguments);
      }

      NavbarItems.prototype.model = NavbarItem;

      NavbarItems.prototype.initialize = function(models, options) {
        return this.user = options.user;
      };

      NavbarItems.prototype.viewChanged = function(changedItem) {
        return this.each(function(item) {
          if (item !== changedItem && item.get('viewActive')) {
            return item.set({
              viewActive: false
            });
          }
        });
      };

      NavbarItems.prototype.loadItems = function() {
        return this.reset([
          {
            view: PostView,
            viewActive: true,
            title: 'Posts'
          }, {
            view: VideoView,
            viewActive: false,
            title: 'Videos'
          }, {
            view: PicturesView,
            viewActive: false,
            title: 'Pictures'
          }
        ]);
      };

      return NavbarItems;

    })(Backbone.Collection);
  });

  define(['backbone', 'models/post'], function(Backbone, Post) {
    var Posts;
    return Posts = (function(_super) {

      __extends(Posts, _super);

      function Posts() {
        return Posts.__super__.constructor.apply(this, arguments);
      }

      Posts.prototype.model = Post;

      Posts.prototype.url = '/posts';

      return Posts;

    })(Backbone.Collection);
  });

  define([], function() {
    return window.blogolitious_mobile;
  });

  define(['backbone', 'text!templates/support/wysiwyg.html'], function(Backbone, Template) {
    var WYSIWYG;
    return WYSIWYG = (function(_super) {

      __extends(WYSIWYG, _super);

      function WYSIWYG() {
        this.leave = __bind(this.leave, this);

        this.changeSize = __bind(this.changeSize, this);

        this.changeBgColor = __bind(this.changeBgColor, this);

        this.changeColor = __bind(this.changeColor, this);

        this.insertLink = __bind(this.insertLink, this);

        this.rightIndent = __bind(this.rightIndent, this);

        this.leftIndent = __bind(this.leftIndent, this);

        this.insertOrderedList = __bind(this.insertOrderedList, this);

        this.insertUnorderedList = __bind(this.insertUnorderedList, this);

        this.alignRight = __bind(this.alignRight, this);

        this.alignCenter = __bind(this.alignCenter, this);

        this.alignLeft = __bind(this.alignLeft, this);

        this.makeHorizontalLine = __bind(this.makeHorizontalLine, this);

        this.makeUnderline = __bind(this.makeUnderline, this);

        this.makeItalic = __bind(this.makeItalic, this);

        this.makeBold = __bind(this.makeBold, this);

        this.render = __bind(this.render, this);
        return WYSIWYG.__super__.constructor.apply(this, arguments);
      }

      WYSIWYG.prototype.events = {
        'click .wysiwyg-bold': 'makeBold',
        'click .wysiwyg-italic': 'makeItalic',
        'click .wysiwyg-underline': 'makeUnderline',
        'click .wysiwyg-hr': 'makeHorizontalLine',
        'click .wysiwyg-left': 'alignLeft',
        'click .wysiwyg-center': 'alignCenter',
        'click .wysiwyg-right': 'alignRight',
        'click .wysiwyg-ul': 'insertUnorderedList',
        'click .wysiwyg-ol': 'insertOrderedList',
        'click .wysiwyg-indentL': 'leftIndent',
        'click .wysiwyg-indentR': 'rightIndent',
        'click .wysiwyg-link': 'insertLink',
        'click .wysiwyg-color': 'changeColor',
        'click .wysiwyg-bgColor': 'changeBgColor',
        'click .wysiwyg-size': 'changeSize'
      };

      WYSIWYG.prototype.initialize = function(options) {
        WYSIWYG.__super__.initialize.call(this, options);
        return this.template = _.template(Template);
      };

      WYSIWYG.prototype.render = function() {
        this.$el.html(this.template);
        return this;
      };

      WYSIWYG.prototype.makeBold = function(e) {
        e.preventDefault();
        return document.execCommand('bold', null, false);
      };

      WYSIWYG.prototype.makeItalic = function(e) {
        e.preventDefault();
        return document.execCommand('italic', null, false);
      };

      WYSIWYG.prototype.makeUnderline = function(e) {
        e.preventDefault();
        return document.execCommand('underline', null, false);
      };

      WYSIWYG.prototype.makeHorizontalLine = function(e) {
        e.preventDefault();
        return document.execCommand('inserthorizontalrule', null, false);
      };

      WYSIWYG.prototype.alignLeft = function(e) {
        e.preventDefault();
        return document.execCommand('justifyleft', null, false);
      };

      WYSIWYG.prototype.alignCenter = function(e) {
        e.preventDefault();
        return document.execCommand('justifycenter', null, false);
      };

      WYSIWYG.prototype.alignRight = function(e) {
        e.preventDefault();
        return document.execCommand('justifyright', null, false);
      };

      WYSIWYG.prototype.insertUnorderedList = function(e) {
        e.preventDefault();
        return document.execCommand('insertunorderedlist', null, false);
      };

      WYSIWYG.prototype.insertOrderedList = function(e) {
        e.preventDefault();
        return document.execCommand('insertorderedlist', null, false);
      };

      WYSIWYG.prototype.leftIndent = function(e) {
        e.preventDefault();
        return document.execCommand('indent', null, false);
      };

      WYSIWYG.prototype.rightIndent = function(e) {
        e.preventDefault();
        return document.execCommand('outdent', null, false);
      };

      WYSIWYG.prototype.insertLink = function(e) {
        var link;
        e.preventDefault();
        link = prompt('Please enter your link:', 'http://');
        return document.execCommand('CreateLink', null, link);
      };

      WYSIWYG.prototype.changeColor = function(e) {
        var color;
        e.preventDefault();
        color = prompt('Enter name or hexadecimal value of color:', '');
        return document.execCommand('forecolor', null, color);
      };

      WYSIWYG.prototype.changeBgColor = function(e) {
        var bgColor;
        e.preventDefault();
        bgColor = prompt('Enter name or hexadecimal value of color:', '');
        return document.execCommand('backcolor', null, bgColor);
      };

      WYSIWYG.prototype.changeSize = function(e) {
        var fSize;
        e.preventDefault();
        fSize = prompt('Enter the font size in pixels between 1 and 7', '');
        return document.execCommand('fontsize', null, fSize);
      };

      WYSIWYG.prototype.leave = function() {
        return this.remove();
      };

      return WYSIWYG;

    })(Backbone.View);
  });

  define(['text!templates/support/modal.html'], function(Template) {
    var ModalView;
    return ModalView = (function(_super) {

      __extends(ModalView, _super);

      function ModalView() {
        this.render = __bind(this.render, this);
        return ModalView.__super__.constructor.apply(this, arguments);
      }

      ModalView.prototype.className = 'modal hide fade';

      ModalView.prototype.initialize = function(options) {
        this.view = options.body;
        this.title = options.title;
        this.template = _.template(Template, {
          title: this.title
        });
        return this.render();
      };

      ModalView.prototype.render = function() {
        this.view.render();
        this.$el.html(this.template);
        this.$('.modal-body').append(this.view.el);
        $(this.el).modal({
          backdrop: true,
          keyboard: true,
          show: true
        });
        return this;
      };

      return ModalView;

    })(Backbone.View);
  });

  define(['backbone', 'models/user', 'text!templates/admin/register/show-view.html'], function(Backbone, User, Template) {
    var RegisterView;
    return RegisterView = (function(_super) {

      __extends(RegisterView, _super);

      function RegisterView() {
        this.leave = __bind(this.leave, this);

        this.handleError = __bind(this.handleError, this);

        this.registerUser = __bind(this.registerUser, this);

        this.render = __bind(this.render, this);
        return RegisterView.__super__.constructor.apply(this, arguments);
      }

      RegisterView.prototype.tagName = 'form';

      RegisterView.prototype.className = 'form-horizontal';

      RegisterView.prototype.events = {
        'submit': 'registerUser'
      };

      RegisterView.prototype.initialize = function(options) {
        this.template = _.template(Template);
        this.user = options.user;
        return this.user.on('error', this.handleError);
      };

      RegisterView.prototype.render = function() {
        this.$el.html(this.template(this.user.toJSON()));
        this.$el.backboneLink(this.user);
        return this;
      };

      RegisterView.prototype.registerUser = function(e) {
        e.preventDefault();
        return this.user.save();
      };

      RegisterView.prototype.handleError = function(model, error) {
        console.log('error --->', JSON.parse(error.responseText));
        return console.log('error without parse', error);
      };

      RegisterView.prototype.leave = function() {
        return this.remove();
      };

      return RegisterView;

    })(Backbone.View);
  });

  define(['backbone', 'views/admin/navbar/show-view', 'collections/navbar-items', 'text!templates/admin/site/layout-view.html'], function(Backbone, NavbarView, NavbarItems, Template) {
    var AdminSite;
    return AdminSite = (function(_super) {

      __extends(AdminSite, _super);

      function AdminSite() {
        this.displayActiveView = __bind(this.displayActiveView, this);

        this.checkForActiveView = __bind(this.checkForActiveView, this);

        this.navbar = __bind(this.navbar, this);

        this.siteLayout = __bind(this.siteLayout, this);

        this.onUserChange = __bind(this.onUserChange, this);

        this.render = __bind(this.render, this);
        return AdminSite.__super__.constructor.apply(this, arguments);
      }

      AdminSite.prototype.className = 'page';

      AdminSite.prototype.initialize = function(options) {
        this.template = _.template(Template);
        this.user = options.user;
        this.user.on('change:created_at', this.onUserChange);
        this.navItems = new NavbarItems([], {
          user: this.user
        });
        this.navItems.on('active:view:changed', this.displayActiveView);
        return this.navItems.loadItems();
      };

      AdminSite.prototype.render = function() {
        this.siteLayout();
        this.navbar();
        this.checkForActiveView();
        return this;
      };

      AdminSite.prototype.onUserChange = function() {
        this.navbar();
        return this.checkForActiveView();
      };

      AdminSite.prototype.siteLayout = function() {
        return this.$el.append(this.template);
      };

      AdminSite.prototype.navbar = function() {
        var _ref;
        if ((_ref = this.navbarView) != null) {
          _ref.leave();
        }
        this.navbarView = new NavbarView({
          collection: this.navItems,
          user: this.user
        });
        return this.$('.navbar').append(this.navbarView.render().el);
      };

      AdminSite.prototype.checkForActiveView = function() {
        var _ref;
        if (this.user.has('created_at')) {
          return this.navItems.each(this.displayActiveView);
        } else {
          return (_ref = this.activeView) != null ? _ref.leave() : void 0;
        }
      };

      AdminSite.prototype.displayActiveView = function(model) {
        var View, _ref;
        if (model.get('viewActive')) {
          if ((_ref = this.activeView) != null) {
            _ref.leave();
          }
          View = model.get('view');
          this.activeView = new View({
            model: model,
            user: this.user
          });
          return this.$('.content').append(this.activeView.render().el);
        }
      };

      return AdminSite;

    })(Backbone.View);
  });

  define(['backbone', 'is!mobile?text!templates/admin/login/show-mobile.html:text!templates/admin/login/show.html'], function(Backbone, Template) {
    var LoginShowView;
    return LoginShowView = (function(_super) {

      __extends(LoginShowView, _super);

      function LoginShowView() {
        this.leave = __bind(this.leave, this);

        this.handleError = __bind(this.handleError, this);

        this.login = __bind(this.login, this);

        this.render = __bind(this.render, this);
        return LoginShowView.__super__.constructor.apply(this, arguments);
      }

      LoginShowView.prototype.events = {
        'submit': 'login'
      };

      LoginShowView.prototype.initialize = function(options) {
        this.template = _.template(Template);
        this.user = options.user;
        return this.user.on('error', this.handleError);
      };

      LoginShowView.prototype.render = function() {
        this.$el.html(this.template(this.user.toJSON()));
        this.$('form').backboneLink(this.user);
        return this;
      };

      LoginShowView.prototype.login = function(e) {
        e.preventDefault();
        console.log('logging inn');
        return this.user.signIn();
      };

      LoginShowView.prototype.handleError = function(model, err) {
        console.log('error', err);
        return console.log('model', model);
      };

      LoginShowView.prototype.leave = function() {
        return this.remove();
      };

      return LoginShowView;

    })(Backbone.View);
  });

  define(['backbone', 'models/post', 'views/support/wysiwyg', 'text!templates/admin/post/new/show-view.html'], function(Backbone, Post, TextEditorView, Template) {
    var NewPostView;
    return NewPostView = (function(_super) {

      __extends(NewPostView, _super);

      function NewPostView() {
        this.leave = __bind(this.leave, this);

        this.handleSuccess = __bind(this.handleSuccess, this);

        this.handleError = __bind(this.handleError, this);

        this.submitData = __bind(this.submitData, this);

        this.editor = __bind(this.editor, this);

        this.render = __bind(this.render, this);
        return NewPostView.__super__.constructor.apply(this, arguments);
      }

      NewPostView.prototype.tagName = 'form';

      NewPostView.prototype.className = 'form-horizontal';

      NewPostView.prototype.events = {
        'submit': 'submitData'
      };

      NewPostView.prototype.initialize = function(options) {
        this.template = _.template(Template);
        this.post = new Post();
        this.post.on('error', this.handleError);
        return this.post.on('sync', this.handleSuccess);
      };

      NewPostView.prototype.render = function() {
        this.$el.html(this.template(this.post.toJSON()));
        this.$el.backboneLink(this.post);
        this.editor();
        return this;
      };

      NewPostView.prototype.editor = function() {
        this.editor = new TextEditorView();
        return this.$('.editor').append(this.editor.render().el);
      };

      NewPostView.prototype.submitData = function(e) {
        e.preventDefault();
        this.post.set({
          body: this.$('.wysiwyg-editor').html()
        });
        return this.post.save();
      };

      NewPostView.prototype.handleError = function(model, res) {
        return console.log('error', res.responseText);
      };

      NewPostView.prototype.handleSuccess = function() {
        return console.log('success');
      };

      NewPostView.prototype.leave = function() {
        this.post.off();
        this.editor.leave();
        return this.remove();
      };

      return NewPostView;

    })(Backbone.View);
  });

  define(['backbone', 'models/post', 'collections/posts/dashboard-items', 'views/admin/post/new/show-view', 'views/admin/post/dashboard/list-view', 'text!templates/admin/post/show-view.html'], function(Backbone, PostModel, DashboardItems, Post, Dashboard, Template) {
    var PostView;
    return PostView = (function(_super) {

      __extends(PostView, _super);

      function PostView() {
        this.leave = __bind(this.leave, this);

        this.displayActiveView = __bind(this.displayActiveView, this);

        this.checkForActiveView = __bind(this.checkForActiveView, this);

        this.dashboard = __bind(this.dashboard, this);

        this.render = __bind(this.render, this);
        return PostView.__super__.constructor.apply(this, arguments);
      }

      PostView.prototype.className = 'row';

      PostView.prototype.initialize = function(options) {
        this.template = _.template(Template);
        this.user = options.user;
        this.post = new PostModel();
        this.dashboardItems = new DashboardItems([], {});
        this.dashboardItems.on('active:view:changed', this.displayActiveView);
        return this.dashboardItems.loadItems();
      };

      PostView.prototype.render = function() {
        this.$el.html(this.template);
        this.dashboard();
        this.checkForActiveView();
        return this;
      };

      PostView.prototype.dashboard = function() {
        this.dashboard = new Dashboard({
          collection: this.dashboardItems
        });
        return this.$('.dashboard').append(this.dashboard.render().el);
      };

      PostView.prototype.checkForActiveView = function() {
        return this.dashboardItems.each(this.displayActiveView);
      };

      PostView.prototype.displayActiveView = function(model) {
        var View, _ref;
        if (model.get('viewActive')) {
          if ((_ref = this.activeView) != null) {
            _ref.leave();
          }
          View = model.get('view');
          this.activeView = new View({
            model: model
          });
          return this.$('.post-content').append(this.activeView.render().el);
        }
      };

      PostView.prototype.leave = function() {
        var _ref;
        this.dashboardItems.off();
        if ((_ref = this.activeView) != null) {
          _ref.leave();
        }
        this.dashboard.leave();
        return this.remove();
      };

      return PostView;

    })(Backbone.View);
  });

  define(['backbone', 'views/admin/post/dashboard/item-view'], function(Backbone, ItemView) {
    var ListView;
    return ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        this.leave = __bind(this.leave, this);

        this.addOne = __bind(this.addOne, this);

        this.addAll = __bind(this.addAll, this);

        this.render = __bind(this.render, this);
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.tagName = 'ul';

      ListView.prototype.className = 'nav nav-tabs nav-stacked affix';

      ListView.prototype.initialize = function(options) {
        return this.collection.on('reset', this.render);
      };

      ListView.prototype.render = function() {
        this.$el.html();
        this.addAll();
        return this;
      };

      ListView.prototype.addAll = function() {
        return this.collection.each(this.addOne);
      };

      ListView.prototype.addOne = function(model) {
        this.itemView = new ItemView({
          model: model
        });
        return this.$el.append(this.itemView.render().el);
      };

      ListView.prototype.leave = function() {
        return this.remove();
      };

      return ListView;

    })(Backbone.View);
  });

  define(['backbone', 'text!templates/admin/post/dashboard/item-view.html'], function(Backbone, Template) {
    var ItemView;
    return ItemView = (function(_super) {

      __extends(ItemView, _super);

      function ItemView() {
        this.leave = __bind(this.leave, this);

        this.displayActiveView = __bind(this.displayActiveView, this);

        this.updateActiveView = __bind(this.updateActiveView, this);

        this.render = __bind(this.render, this);
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tagName = 'li';

      ItemView.prototype.events = {
        'click': 'displayActiveView'
      };

      ItemView.prototype.initialize = function(options) {
        this.template = _.template(Template, this.model.toJSON());
        return this.model.on('change:viewActive', this.updateActiveView);
      };

      ItemView.prototype.render = function() {
        this.$el.html(this.template);
        this.updateActiveView();
        return this;
      };

      ItemView.prototype.updateActiveView = function() {
        if (this.model.get('viewActive')) {
          this.$el.removeClass('inactive');
          return this.$el.addClass('active');
        } else {
          this.$el.removeClass('active');
          return this.$el.addClass('inactive');
        }
      };

      ItemView.prototype.displayActiveView = function(e) {
        e.preventDefault();
        this.model.activateView();
        return this.model.collection.viewChanged(this.model);
      };

      ItemView.prototype.leave = function() {
        this.model.off('change:viewActive');
        return this.remove();
      };

      return ItemView;

    })(Backbone.View);
  });

  define(['backbone', 'views/admin/post/search/item-view', 'text!templates/admin/post/search/list-view.html'], function(Backbone, ItemView, Template) {
    var ListView;
    return ListView = (function(_super) {

      __extends(ListView, _super);

      function ListView() {
        this.leave = __bind(this.leave, this);

        this.addOne = __bind(this.addOne, this);

        this.addAll = __bind(this.addAll, this);

        this.render = __bind(this.render, this);
        return ListView.__super__.constructor.apply(this, arguments);
      }

      ListView.prototype.tagName = 'table';

      ListView.prototype.className = 'table table-striped table-bordered table-condensed';

      ListView.prototype.initialize = function(options) {
        return this.template = _.template(Template);
      };

      ListView.prototype.render = function() {
        this.$el.html(this.template);
        this.addAll();
        return this;
      };

      ListView.prototype.addAll = function() {
        return this.collection.each(this.addOne);
      };

      ListView.prototype.addOne = function(model) {
        var view;
        view = new ItemView({
          model: model
        });
        return this.$el.append(view.render().el);
      };

      ListView.prototype.leave = function() {
        return this.remove();
      };

      return ListView;

    })(Backbone.View);
  });

  define(['backbone', 'text!templates/admin/post/search/show-view.html', 'views/admin/post/search/list-view', 'collections/posts'], function(Backbone, Template, ListView, Posts) {
    var SearchView;
    return SearchView = (function(_super) {

      __extends(SearchView, _super);

      function SearchView() {
        this.leave = __bind(this.leave, this);

        this.searchPosts = __bind(this.searchPosts, this);

        this.list = __bind(this.list, this);

        this.render = __bind(this.render, this);

        this.updatePost = __bind(this.updatePost, this);
        return SearchView.__super__.constructor.apply(this, arguments);
      }

      SearchView.prototype.tagName = 'form';

      SearchView.prototype.className = 'form-horizontal';

      SearchView.prototype.events = {
        'click #search-post-btn': 'searchPosts'
      };

      SearchView.prototype.initialize = function(options) {
        this.template = _.template(Template);
        this.posts = new Posts();
        this.posts.on('reset', this.render);
        return this.posts.on('update:post', this.updatePost);
      };

      SearchView.prototype.updatePost = function(post) {
        return console.log('hehehe', post.toJSON());
      };

      SearchView.prototype.render = function() {
        this.$el.html(this.template);
        this.list();
        return this;
      };

      SearchView.prototype.list = function() {
        this.listView = new ListView({
          collection: this.posts
        });
        return this.$el.append(this.listView.render().el);
      };

      SearchView.prototype.searchPosts = function(e) {
        e.preventDefault();
        return this.posts.fetch({
          data: {
            published: this.$('.published').val()
          }
        });
      };

      SearchView.prototype.leave = function() {
        return this.remove();
      };

      return SearchView;

    })(Backbone.View);
  });

  define(['backbone', 'text!templates/admin/post/search/item-view.html'], function(Backbone, Template) {
    var ItemView;
    return ItemView = (function(_super) {

      __extends(ItemView, _super);

      function ItemView() {
        this.editPost = __bind(this.editPost, this);

        this.render = __bind(this.render, this);
        return ItemView.__super__.constructor.apply(this, arguments);
      }

      ItemView.prototype.tagName = 'tr';

      ItemView.prototype.events = {
        'click #edit-post-btn': 'editPost'
      };

      ItemView.prototype.initialize = function(options) {
        return this.template = _.template(Template);
      };

      ItemView.prototype.render = function() {
        this.$el.html(this.template({
          post: this.model.toJSON()
        }));
        return this;
      };

      ItemView.prototype.editPost = function(e) {
        e.preventDefault();
        return this.model.trigger('update:post', this.model);
      };

      return ItemView;

    })(Backbone.View);
  });

  define(['backbone', 'text!templates/admin/video/show-view.html'], function(Backbone, Template) {
    var VideoView;
    return VideoView = (function(_super) {

      __extends(VideoView, _super);

      function VideoView() {
        this.leave = __bind(this.leave, this);

        this.render = __bind(this.render, this);
        return VideoView.__super__.constructor.apply(this, arguments);
      }

      VideoView.prototype.className = 'video-view';

      VideoView.prototype.initialize = function(options) {
        return this.template = _.template(Template);
      };

      VideoView.prototype.render = function() {
        this.$el.html(this.template);
        return this;
      };

      VideoView.prototype.leave = function() {
        return this.remove();
      };

      return VideoView;

    })(Backbone.View);
  });

  define(['backbone', 'text!templates/admin/pictures/show-view.html'], function(Backbone, Template) {
    var PicView;
    return PicView = (function(_super) {

      __extends(PicView, _super);

      function PicView() {
        this.leave = __bind(this.leave, this);

        this.render = __bind(this.render, this);
        return PicView.__super__.constructor.apply(this, arguments);
      }

      PicView.prototype.className = 'pic-view';

      PicView.prototype.initialize = function(options) {
        return this.template = _.template(Template);
      };

      PicView.prototype.render = function() {
        this.$el.html(this.template);
        return this;
      };

      PicView.prototype.leave = function() {
        return this.remove();
      };

      return PicView;

    })(Backbone.View);
  });

  define(['backbone', 'views/admin/navbar/item-view'], function(Backbone, NavItemView) {
    var NavListView;
    return NavListView = (function(_super) {

      __extends(NavListView, _super);

      function NavListView() {
        this.addOne = __bind(this.addOne, this);

        this.addAll = __bind(this.addAll, this);

        this.render = __bind(this.render, this);
        return NavListView.__super__.constructor.apply(this, arguments);
      }

      NavListView.prototype.className = 'nav';

      NavListView.prototype.tagname = 'ul';

      NavListView.prototype.initialize = function(options) {
        return this.collection.on("reset", this.render);
      };

      NavListView.prototype.render = function() {
        this.$el.html();
        this.addAll();
        return this;
      };

      NavListView.prototype.addAll = function() {
        return this.collection.each(this.addOne);
      };

      NavListView.prototype.addOne = function(model) {
        this.view = new NavItemView({
          model: model
        });
        return this.$el.append(this.view.render().el);
      };

      return NavListView;

    })(Backbone.View);
  });

  define(['backbone', 'views/admin/navbar/list-view', 'text!templates/admin/navbar/show-view.html', 'views/support/modal', 'views/admin/login/show-view', 'views/admin/register/show-view'], function(Backbone, NavListView, Template, ModalView, LoginView, RegisterView) {
    var NavbarShowView;
    return NavbarShowView = (function(_super) {

      __extends(NavbarShowView, _super);

      function NavbarShowView() {
        this.leave = __bind(this.leave, this);

        this.logOut = __bind(this.logOut, this);

        this.register = __bind(this.register, this);

        this.signin = __bind(this.signin, this);

        this.renderItems = __bind(this.renderItems, this);

        this.render = __bind(this.render, this);
        return NavbarShowView.__super__.constructor.apply(this, arguments);
      }

      NavbarShowView.prototype.className = 'navbar-inner';

      NavbarShowView.prototype.events = {
        'click .signin': 'signin',
        'click .register': 'register',
        'click .logout': 'logOut'
      };

      NavbarShowView.prototype.initialize = function(options) {
        this.template = _.template(Template);
        this.items = options.collection;
        return this.user = options.user;
      };

      NavbarShowView.prototype.render = function() {
        this.$el.html(this.template({
          user: this.user.toJSON()
        }));
        this.renderItems();
        return this;
      };

      NavbarShowView.prototype.renderItems = function() {
        this.navItemsList = new NavListView({
          collection: this.items
        });
        return this.$('.menu-items').append(this.navItemsList.render().el);
      };

      NavbarShowView.prototype.signin = function(e) {
        var modal;
        e.preventDefault();
        this.loginView = new LoginView({
          user: this.user
        });
        modal = new ModalView({
          body: this.loginView,
          title: 'Please Sign In'
        });
        return this.$el.append(modal);
      };

      NavbarShowView.prototype.register = function(e) {
        var modal;
        e.preventDefault();
        this.registerView = new RegisterView({
          user: this.user
        });
        modal = new ModalView({
          body: this.registerView,
          title: 'Please Register'
        });
        return this.$el.append(modal);
      };

      NavbarShowView.prototype.logOut = function(e) {
        e.preventDefault();
        return this.user.logOut();
      };

      NavbarShowView.prototype.leave = function() {
        return this.remove();
      };

      return NavbarShowView;

    })(Backbone.View);
  });

  define(['backbone', 'text!templates/admin/navbar/item-view.html'], function(Backbone, Template) {
    var NavItemView;
    return NavItemView = (function(_super) {

      __extends(NavItemView, _super);

      function NavItemView() {
        this.leave = __bind(this.leave, this);

        this.displayActiveView = __bind(this.displayActiveView, this);

        this.updateActiveView = __bind(this.updateActiveView, this);

        this.render = __bind(this.render, this);
        return NavItemView.__super__.constructor.apply(this, arguments);
      }

      NavItemView.prototype.tagName = 'li';

      NavItemView.prototype.events = {
        'click': 'displayActiveView'
      };

      NavItemView.prototype.initialize = function(options) {
        this.template = _.template(Template, this.model.toJSON());
        return this.model.on('change:viewActive', this.updateActiveView);
      };

      NavItemView.prototype.render = function() {
        this.$el.html(this.template);
        this.updateActiveView();
        return this;
      };

      NavItemView.prototype.updateActiveView = function() {
        if (this.model.get('viewActive')) {
          this.$el.removeClass('inactive');
          return this.$el.addClass('active');
        } else {
          this.$el.removeClass('active');
          return this.$el.addClass('inactive');
        }
      };

      NavItemView.prototype.displayActiveView = function(e) {
        e.preventDefault();
        this.model.activateView();
        return this.model.collection.viewChanged(this.model);
      };

      NavItemView.prototype.leave = function() {
        this.model.off('change:viewActive');
        return this.remove();
      };

      return NavItemView;

    })(Backbone.View);
  });

  requirejs.config({
    paths: {
      text: 'lib/require/text',
      is: 'lib/require/is',
      'is-api': 'lib/require/is-api',
      jquery: 'lib/jquery',
      underscore: 'lib/underscore',
      backbone: 'lib/backbone',
      'backbone-datalink': 'lib/backbone/backbone-datalink',
      bootstrap: 'lib/bootstrap',
      mobile: 'helper/device-detection'
    },
    shim: {
      underscore: {
        exports: '_'
      },
      backbone: {
        deps: ['underscore', 'jquery', 'backbone-datalink'],
        exports: 'Backbone'
      }
    }
  });

  requirejs(['app-admin'], function(App) {
    return App.init();
  });

}).call(this);
